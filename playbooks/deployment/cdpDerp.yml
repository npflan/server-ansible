---
- hosts: npf_gameservers
  gather_facts: yes
  vars:
    rackskabe_start:
      "103": 10.100.0.0
      "106": 10.100.4.0
      "107": 10.100.8.0
    gameservers_per_host: 16
    netid_maskbit: 28
    ospf_area:
      "103": 53
      "106": 56
      "107": 57
  tasks:
  - name: listen for cdp
    shell: timeout 60 tcpdump -nn -v -i eth0 -s 1500 -c 1 'ether[20:2] == 0x2000'|awk 'match($0, /GigabitEthernet1\/([0-9]{1,2})/,a){print a[1]}'
    async: 60
    poll: 15
    register: tcpdump_command
  - debug: msg={{tcpdump_command.stdout}}
  - set_fact:
      portnummer: "{{ tcpdump_command.stdout|int }}"
      cacheable: true
    when:  tcpdump_command.stdout|int(-1) != -1 
  - debug: msg={{tcpdump_command.stdout|int(-1)}}
#  - debug: msg={{portnummer}}
  - name: check if portnummer is set
    fail: msg="portnummer is undefined"
    when: portnummer is not defined


  - name: checking ip address
    set_fact:
      rackskab: "{{ ansible_eth0.ipv4.address.split('.')[2] }}"
      cacheable: true
    when: ansible_eth0.ipv4.address.split('.')[2] in ["103","106","107"]
  - debug: msg={{ ansible_eth0.ipv4.address.split('.')[2] in ["103","106","107"]}}
  - debug: msg={{ rackskab }}
  - name: check if rackskab is defined
    fail: msg="rackskab is undefined"
    when: rackskab is not defined

  - name: finding my scope placement
    local_action: command /root/ansible/tools/ipincrementer {{rackskabe_start[""+rackskab]}} {{gameservers_per_host * portnummer|int}}
    register: netid_command
  - debug: msg={{netid_command}}

  - name: check if netid is ip
    set_fact:
      netid: "{{netid_command.stdout}}"
    when: netid_command.stdout|ipaddr != true

  - name: check if netid is defined
    fail: msg="netid is undefined"
    when: netid is not defined
    
  - name: finding all my ips
    local_action: command /root/ansible/tools/iplister {{netid}}/{{netid_maskbit}}
    register: iplist_command

  - debug: msg={{iplist_command}}

  - name: set fact for that
    set_fact:
      interfaces: "{{iplist_command.stdout_lines}}"
  
  - name: installere lige bird
    apt: 
      name: bird
      state: installed
      update_cache: yes 
 
  - name: generate bird config
    template:
      src: /etc/ansible/templates/gameservers/bird.conf
      dest: /etc/bird/bird.conf
    
  - name: generate interfaces file
    template:
      src: /etc/ansible/templates/gameservers/interfaces
      dest: /etc/network/interfaces

  - name: tager lige alle interfaces ned
    command: /sbin/ifdown -a
    async: 72
    poll: 5

  - name: og op igen!
    command: /sbin/ifup -a
    async: 72
    poll: 5

  - name: sætter lige bird til at starte op automatisk
    command: /usr/sbin/update-rc.d bird enable
    async: 72

  - name: og sørger lige for at bird er startet
    service:
      name: bird
      state: started
